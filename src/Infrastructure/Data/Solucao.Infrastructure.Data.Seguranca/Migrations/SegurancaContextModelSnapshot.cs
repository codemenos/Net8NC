namespace Solucao.Infrastructure.Data.Seguranca.Migrations;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Solucao.Infrastructure.Data.Seguranca.Contexts;

// <auto-generated />
[DbContext(typeof(SegurancaContext))]
partial class SegurancaContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.1")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("Solucao.Domain.Seguranca.Aggregates.SecurityApplication", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("ApplicationType")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("ClientId")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("ClientSecret")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClientType")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("ConsentType")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("DisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("DisplayNames")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("JsonWebKeySet")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Permissions")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PostLogoutRedirectUris")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Properties")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RedirectUris")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Requirements")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Settings")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("ClientId")
                    .IsUnique()
                    .HasFilter("[ClientId] IS NOT NULL");

                b.ToTable("SecurityApplications", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Aggregates.SecurityAuthorization", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid?>("ApplicationId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<DateTime?>("CreationDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Properties")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Scopes")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Status")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("Subject")
                    .HasMaxLength(400)
                    .HasColumnType("nvarchar(400)");

                b.Property<string>("Type")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("Id");

                b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                b.ToTable("SecurityAuthorizations", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Aggregates.SecurityRole", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("SecurityRole", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Aggregates.SecurityToken", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid?>("ApplicationId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid?>("AuthorizationId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<DateTime?>("CreationDate")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("ExpirationDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Payload")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Properties")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime?>("RedemptionDate")
                    .HasColumnType("datetime2");

                b.Property<string>("ReferenceId")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("Status")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("Subject")
                    .HasMaxLength(400)
                    .HasColumnType("nvarchar(400)");

                b.Property<string>("Type")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("Id");

                b.HasIndex("AuthorizationId");

                b.HasIndex("ReferenceId")
                    .IsUnique()
                    .HasFilter("[ReferenceId] IS NOT NULL");

                b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                b.ToTable("SecurityTokens", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Aggregates.SecurityUser", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("SecurityUser", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityRoleClaim", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("RoleId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("SecurityRoleClaim", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityScope", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("ConcurrencyToken")
                    .IsConcurrencyToken()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Descriptions")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("DisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("DisplayNames")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)");

                b.Property<string>("Properties")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Resources")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique()
                    .HasFilter("[Name] IS NOT NULL");

                b.ToTable("SecurityScopes", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityUserClaim", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("SecurityUserClaim", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityUserLogin", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("SecurityUserLogin", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityUserRole", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("RoleId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("SecurityUserRole", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityUserToken", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("SecurityUserToken", (string)null);
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Aggregates.SecurityAuthorization", b =>
            {
                b.HasOne("Solucao.Domain.Seguranca.Aggregates.SecurityApplication", "Application")
                    .WithMany("Authorizations")
                    .HasForeignKey("ApplicationId");

                b.Navigation("Application");
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Aggregates.SecurityToken", b =>
            {
                b.HasOne("Solucao.Domain.Seguranca.Aggregates.SecurityApplication", "Application")
                    .WithMany("Tokens")
                    .HasForeignKey("ApplicationId");

                b.HasOne("Solucao.Domain.Seguranca.Aggregates.SecurityAuthorization", "Authorization")
                    .WithMany("Tokens")
                    .HasForeignKey("AuthorizationId");

                b.Navigation("Application");

                b.Navigation("Authorization");
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityRoleClaim", b =>
            {
                b.HasOne("Solucao.Domain.Seguranca.Aggregates.SecurityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityUserClaim", b =>
            {
                b.HasOne("Solucao.Domain.Seguranca.Aggregates.SecurityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityUserLogin", b =>
            {
                b.HasOne("Solucao.Domain.Seguranca.Aggregates.SecurityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityUserRole", b =>
            {
                b.HasOne("Solucao.Domain.Seguranca.Aggregates.SecurityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Solucao.Domain.Seguranca.Aggregates.SecurityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Entities.SecurityUserToken", b =>
            {
                b.HasOne("Solucao.Domain.Seguranca.Aggregates.SecurityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Aggregates.SecurityApplication", b =>
            {
                b.Navigation("Authorizations");

                b.Navigation("Tokens");
            });

        modelBuilder.Entity("Solucao.Domain.Seguranca.Aggregates.SecurityAuthorization", b =>
            {
                b.Navigation("Tokens");
            });
#pragma warning restore 612, 618
    }
}
